# day 03

자바 프로그램의 토큰 구분
==> 컴파일러는 토큰 단위로 번역을 시도한다.
	따라서 개발자는 컴파일러가 번역을 하는 토큰을 구분해줘야한다.
	이것이 " ; " 라는 기호를 이용해서 구분하게 된다.
	
	우리가 습관적으로 	int no = 10;
	이라고 작성한 이유가 토큰을 구분하기 위한 기호였다.
	
	결론적으로 토큰이란?
	하나의 명령이 종료되었음을 알려주는 기호이다.
	
	만약 개발자가 토큰 구분을 하지 않으면 오류가 날 수도 있다.
	
	예]
		int a = 10
		int b = 20;
		==> 컴파일러는 두줄을 하나의 명령어로 인식해서 처리하게되고
		이런 명령 형식은 존재하지 않으므로 에러가 발생하게 된다.
		
	예]
		int a = 10; int b = 20;
		==> 비록 한줄로 작성은 했지만 두개의 명령으로 인식하여
		int a = 10;	만 컴파일 하고
		int b = 20; 을 따로 컴파일 하게되므로 안전하게 컴파일이 완성될 수 있다.
	
	참고] 
	
	; 대신에 } 기호가 그 역할을 대신 할 수 있다.
	
	예]
		if(조건식){
		} // 이 부분에서 토큰이 발생하게 된다.
		
--------------------------------------------

참고] 
	키보드를 이용해서 데이터 입력 받기
	(원칙적으로 이 부분은 OOP(객체지향프로그램)이론 을 먼저 배워야 완벽하게 이해가 된다.)

자바가 처음 막히는 부분은 다차원 배열부분부터
배열 이후에 오는 난관은 객체지향이다.

이해하려고 하면 힘들지만 사용하려고 하면 딱히 어렵진 않다. 사용하는 방법만 익혀서 사용하다보면
객체지향이라는 느낌이 조금씩 와닿지 않을까?

메소드란? 클래스 안에 지정된 함수를 메소드 라고 한다.
함수는 class 안에 지정되지 않아도 사용할 수 있는 함수.

자바에선 메소드를 함수라고 불러도 무방하다. 왜냐면 모든 함수는 class 안에서 작성되니까.

	1. class 가 만들어지기 이전에
	
		import java.util.*; 또는 import.util.Scanner;
	이라는 명령을 이용해서 사용할 라이브러리를 등록한다.
	
	2. 프로그램에서 (주로 아직은 main함수에서)
	
		Scanner sc = new Scanner(System.im);
		
		이라는 명령을 이용해서 키보드를 통해서 입력받을 도구를 준비한다.
		
		//둘 다 임포트 되어 있을 경우엔 후자 쪽을 우선시한다. 직접 명시되어있으므로. 	
	
		3. 키보드를 통해서 입력받을 필요가 생기면
	
		변수 = sc.nextXXX();
		명령을 이용해서 데이터를 입력 받으면 된다.
		
		이때 XXX는 입력받을 데이터의 종류에 따라 달라진다.
			예]
				문자열을 입력받고 싶으면
					String str = sc.nextLine();

				정수를 입력받고 싶으면
					int num = sc.nextLine();

				실수를 입력받고 싶으면
					float str = sc.nextLine();
			주의]
				입력받고자 하는 타입이 아닌 문자열이 입력되면 에러가 발생한다.
				
				예]
					int no = sc.nextInt(); // ==> "가나다라"
								
	참고]
		문자화된 숫자를 실제 숫자로 변환시키는 방법
		
			예] "123" ==> 보이기에는 숫자처럼 보이지만 실제로는 문자열이다.
						  이것은 연산을 할 수 없는 상태이다.
				이것을 실제 연산이 가능한 숫자로 변환하는 방법
				
					int no = Integer.parseInt("123");
				==> 문자열 "123"을 숫자 123으로 바꾸는 명령이다.
	

------------------------------------------------------------------------------------------------

상수와 변수

	I) 상수
		==> 개발자가 프로그램에게 알려주는 데이터(정보)
		
		예]
			System.out.println("hello");
			==> "hello" 가 상수이다.
			// 이 데이터는 변할 일이 없으니까. 이 상수가 쌓이는곳이 리터럴이다.
			문제는 상수는 "리터럴 풀" 이라는 장소에 일단 저장한 후 사용되도록 되어있다.
		
		예]
			System.out.println("hello");
			라고 명령하면
				1) 먼저 "hello" 라는 데이터를 리터럴 풀에 저장한다.
				2) 리터럴 풀에 있는 데이터를 꺼내서 출력하게 된다.
				
		
		리터럴의 종류]
			
			1) 정수형
				일반적인 소수점이 없는 숫자
					10		: 10진수
					010		: 8진수		==> 8이라는 숫자.
					0x10	: 16진수	==> 16이라는 숫자.
					
				예]
					int no = 10;
					int no1 = 010;		==> 실제 기억되는 내용은 8
					int no2 = 0x10;		==> 실제 기억되는 내용은 16
					
				 
			2) 실수형
				소수점이 존재하는 숫자
					3.14	: 일반적인 소수방식
					3.0e5	: 지수 방식	==> 3.0 곱하기 10의 5승
				
					0.25e-7 : 0.25 곱하기 10의 -7승
				
			3) 논리형
				 참과 거짓을 으미하는 데이터
				 	true
				 	false
				 	==> 위의 두가지 이외에는 절대로 논리형을 표현할 수 없다.
				 	
				 	boolean bool = true;
				 	
			4) 문자형
				오직 한글자로만 구성된 문자를 의미한다.
				==> 내부적으로는 입력한 문자를 Uni code방식으로 변환하여 기억하게 된다.
				
					'a'			97이 기억된다.
					'\u0000'	실제 유니코드 값으로 문자를 기억할 수 있다.
								<== 0000은 원하는 문자에 해당하는 Uni code 값
								
			5) 문자열 형
				한글자 이상으로 구성된 문자를 의미한다.
				==> 원칙적으로 이것은 기본 상수는 아니다.
					개발자 입장에서 매우 빈번하게 사용되는 형태이므로 포함시켜 설명한다.
					
				"원하는 문자열"
	II. 변수
	
		참고] 변수의 필요성 : 개발자가 입력한 데이터는 일단 리터럴 풀에 저장된다.
							  그리고 프로그램이 리터럴 풀에 있는 데이터를 꺼내서 사용하게된다.
							  리터럴 풀은 주소를 모르면 사용할 수 없다.	
							  (반드시 주소를 알아야 사용할 수 있다.)
							  
							  변수는 리터럴 풀에 저장된 데이터를 개발자가 사용할 수 있도록
							  주소를 기억하는 방법이다.
							  
							  그리고 개발자가 쉽게 사용할 수 있는 영역이 Stack 이다.
							  
	참고]
		Stack(스택) 의 특징
		
			1. 메모리에 별칭을 붙여서 사용할 수 있는 영역.
				(별칭은 개발자가 붙이는 것이므로 개바랒가 가장 쉽게 이용할 수 있는 영역)
			2. 8개의 영역중에서 리터럴 풀 당므을 ㅗ가장 작은 영열을 운영체제에게 배정받는다.
				(따라서 Stack에 많은 데이터를 보관하면 문제가 발생할 수 있다.)
		
		
----------------------------------------------------------------------

// 변수를 만든다는것은 사용할 데이터타입과 크기, 메모리에 할당받을 공간까지 정한다는 의미다.

참고]
	https://wicidocs.net <<
	https://www.yes24.com ==> 북클럽 월 결제
	
	자바의 정석 기초편
	뇌를 자극하는 java 프로그래밍 
	
----------------------------------------------------------------------
	리터럴 풀의 데이터를 Stack에 기억시키는 방법.
	
		1. Stack에 필요한 메모리를 할당받는다.
		
			형식]
				데이터 타입		변수이름;
			예]
				int				num;
				
			참고]
				변수 이름은 위에서 설명한 Stack에 붙이는 별칭이다.
				따라서 변수 이름만 기억하고 있으면 언제든지 이 영역을 사용할 수 있게 된다.
			
		2. 대입(기억) 연산자를 이용해서 필요한 데이터의 주소를 기억시킨다.
		
			형식] 변수이름 = 데이터 ;
			
			예]  num  	   =	10;
			
		참고]
		
			Stack영역에 메모리를 할당받는 방법
			JVM에게 할당받을 메모리의 크기와 그 안에 기억할 데이터의 형태를 알려줘야한다.
			
			종류는 위에서 살펴본 리터럴(상수)타입.
----------------------------------------------------------------------

콘솔 화면에 출력하는 방법

	1. System.out.println()
		==> 출력한 후 자동 줄바꿈이 일어난다.
			ln은 Line Feed의 약자이다.
			
	2. System.out.print()
		==> 출력한 후 줄바꿈이 일어나지 않는다.
		
		1, 2의 공통적인 특징은 한개의 데이터만 출력할 수 있다. 
		// + 연산자로 합쳐서 한개의 데이터로 만들었다. 오직 +만 가능 -, *, / 다 안된다.
		
		예]
			System.out.println("홍", "길동"); ==>  절대 안된다.
			
	3. System.out.printf()
		==> 여러 데이터를 동시에 출력할 수 있다.
			+ 데이터의 모양(출력행태) 을 만들어서 출력할 수 있다.
			
		참고 ]
			이 함수는 C 언어의 printf()의 것을 그대로 모방한 함수
			
		형식 ]
			System.out.printf("형식을 만드는 문자", 출력데이터1, 출력데이터 2,...)
			
			형식을 만드는 문자
			
			%d - 정수값을 10진수로 출력
			%o - 정수값을 8진수로 출력
			%x - 정수값을 16진수로 출력
			%f - 실수값을 출력
			%e - 실수값을 출력(지수 방식)
			%c - 문자를 출력
			%s - 문자열을 출력
			%b - 논리값을 출력
			
			*
			위의 기호에는 숫자를 붙여서 자릿수를 지정할 수 있다.
			
			예]
				%10d 	==> 10진수를 10자리에 맞추어 출력하세요
				%10.4F 	==> 실수를 10자리에 맞추어 출력하는데 소수 이하는 4자리만 출력하세요		
		
			참고] 
				위의 기호 이외의 내용은 문자열 그대로 출력된다.
				
				
package day03;

import java.util.*;
//사용할 라이브러리 불러오기

public class Test02 {
	public static void main(String[] args) {
		// 입력받을 준비
		Scanner sc = new Scanner(System.in);
		// 입력메세지 출력
		System.out.print("이름을 입력하세요! : ");
		// 입력받은 이름 변수에 기억
		String name = sc.nextLine();
		// 나이 입력받을 메세지 출력
		System.out.print("나이를 입력하세요! : ");
		// 입력받은 나이 변수에 기억
		int age = sc.nextInt();
		// Scanner 닫고		
		sc.close();
		//출력
		System.out.printf("입력된 사람은 [%3s] : %3d 세", name, age);		
		
		
	/*
	 	참고]
	 		Scanner 클래스도 시스템의 자원을 사용하는 클래스이므로
	 		더이상 사용하지 않으면 닫아주는것이 원칙이다.
	 		
	 		닫는 명령은	sc.close();
		 */
	}
}

클래스 바로 밑에 있는 변수와 함수(메소드)를 부르는 말로 member 라고 한다(영어로는 field).
	
	
JVM 기동시에 static 영역이 만들어지고 그 위에 static이 붙은 소스코드가 들어간다.
메모리에 올려진다.


public class Ex01 {
	int no1 = 10;
	
	public static void main(String[] args) {
		System.out.println("no1" + no1) 
		//no1이 바깥에 있어서 정의가 안됨
		System.out.println("no1" + Ex01().no1)
		// Ex01 소속의 no1이라고 정의됨

	}

에러가 났을때 캡쳐해 둔 후 해결하는 방법을 달아서 정리하는게 좋다.
왜냐면 같은 실수를 줄일 수 있는 계기가 된다.
그리고 이력서에 첨부 할 경우 자신이 직접 그 소스코드를 작성했다는 증거가 되기 때문에.

printf 사용시에 반드시 , 로 구분해주어야한다.


package day03;

public class Test03 {
	public static void main(String[] args) {
		int no = 100;
		float no2 = 3.14f;
		boolean bool = true;
		
		System.out.println(no2 + "20");
		System.out.println("FALSE" + bool);
		
		
		// 문자열 + 기본형 데이터 ==> 문자열
	}
}

-----------------------------------------------------------


package day03;

/*
 	비교 연산자
 		두개의 데이터를 비교할 때 사용하는 연산자
 		
 		
 			> 	크다
 			>=
 			<
 			<=
 			==
 			!= 다르다
 			
 		주의] 수학에서는 하나의 식에서 두가지 비교를 할 수 있지만
 			  컴퓨터에서는 한번에 하나의 비교만 가능하다.
 			  
 			  	a = 10;
 			  	b = 20;
 			  	c = 15;
 			  	
 			  	a < b < c : 불가능
 			  	
 			  	(a < b) & (b < c) : 가능 
 			  	
 		참고]
 			비교 연산자의 결과값은 논리값이다.(true, false)

 */


public class Test04 {
	public static void main(String[] args) {
		System.out.println(1 < 2);
		System.out.println(!true); // !는 논리연산값을 뒤집는 not의 역할
		System.out.println(true != (1>2));
		System.out.println(!(1>2));
	}
}


조건 연산자 ( 삼항 연산자 )
	형식
	하나의 조건을 정의하여 만족 시에는 ‘참값’을 반환하고 만족하지 못할 시에는 ‘거짓값’을 반환하여
	단순 비교에 의해 변화를 유도하는 연산자이다.

예제

	int no1 = 10;
	int no2 = 20;
String str1 = ( no1 > no2 ) ? ("no1이 no2보다 크다.") : ("no1이 no2 보다 작다.");
조건식 ? 참일때 반환값 : 거짓일때 반환값 ;


이클립스 > windows > show view > other > git > git reopsitories

데이터베이스 이외에 모든 언어는 0부터 시작한다. 
(str.charat(0)); ==> A


https://github.com/increpas-cls2/jstudy


package day03;

import java.util.Scanner;
/*
 	문제 2]
 		세자리 숫자를 입력받아서
 		그 수가 300보다 크면 "300보다 큰 수"
 		작으면 "300 보다 작은 수"
 		가 출력되게 하세요.
 
 */

public class Ex02 {
	public static void main(String[] args) {
		Scanner sc = new Scanner(System.in);
		// 키보드로 숫자 입력 준비
		// 정수 형태를 입력받는다
		System.out.print("숫자를 입력하세요 ");
		int no1 = sc.nextInt();
		
		System.out.println((no1>300) ? "300보다 큰수" : "300보다 작은 수");

		}
	}
	
package day03;

import java.util.Scanner;

/*
 	삼항 연산자 문제
 		문제 3]
 			정수 3개를 입력받아서 제일 큰 수부터 출력하세요.
 			
 		힌트]
 		
 			삼항 연산자도 중첩해서 사용할 수 있다.
 			() ? (삼항연산자) : (삼항 연산자)
 
 			1. 
 		ABC		a>b = true 이고 a>c를 비교하고 true 이면 b>c true === a>b>c 
 		ACB		a>b = true 이고 a>c를 비교하고 true 이면 b>c false === a>c>b 
 		CAB		a>b = true 이고 B>C = false 일때 a>c = true >> CAB 
 		BAC		a>b = false 일때 B>C = true 이고 a>c = true >>> BAC
 		BCA		a>b = false 일 B>C = false 이고 a>c = false >>> BCA
 		CBA		B>C = false 일때 a>C = false 이고 a>B = false >> CBA
 			 
 */


public class Ex03 {
	public static void main(String[] args) {
		Scanner sc = new Scanner(System.in);
		System.out.println("첫번째 숫자를 입력하세요");
		int A = sc.nextInt();
		System.out.println("두번째 숫자를 입력하세요");
		int B = sc.nextInt();
		System.out.println("세번째 숫자를 입력하세요");
		int C = sc.nextInt();
		
		System.out.println((A>B)?((A>C) ? ((B>C)? (A +">"+B + ">"+ C) : (A +">" + C + ">"+ B))
			:(C + ">" + A +">"+ B))
				:((B>C)?(A>C)? (B + ">" + A + ">" + C) : (B +">" + C +">" + A):(C +">"+ B + ">" + A)));
		
	}
	
}

public class Ex03 {
	public static void main(String[] args) {
		Scanner sc = new Scanner(System.in);
		System.out.println("첫번째 숫자를 입력하세요");
		int A = sc.nextInt();
		System.out.println("두번째 숫자를 입력하세요");
		int B = sc.nextInt();
		System.out.println("세번째 숫자를 입력하세요");
		int C = sc.nextInt();
		
		System.out.println();
		
	}
	
}

package day03;

import java.util.Scanner;
	
/*
  	년수를 입력받아서
  	그 해가 윤년이지 평년인지 판별해서 출력하세요.
  	
  	참고]
  		윤년 : 4로 나누어 떨어지고, 100으로 나누어 떨어지면 안되고
  		400으로 나누어 떨어지는 해는 윤년이다.
  		
  		1300년 : 평년
  		1200년 : 윤년
  
 */

public class Ex04 {
	public static void main(String[] args) {
		Scanner sc = new Scanner(System.in);
		//년도 입력 준비
		System.out.print("년도를 입력하세요! : ");
		//입력메세지 출력하고
		int year = sc.nextInt();
		// 입력년도 변수에 기억하고
		
		String str = (year % 4 != 0) ? "평년" : (
					(year % 100 == 0) ? (
						(year % 400 == 0) ? "윤년" : "평년"
							): "윤년"
						);
		System.out.printf("입력한 년도 [ %4d ] 년은 %2s 입니다", year, str);
	}
}

package day03;

import java.util.Scanner;
/*
  	문제 5]
  		알파벳 문자를 임의로 입력한 후 
  		그 문자가 대문자이면 소문자로 변환하고,
  		소문자면 대문자로 변환하여
  		특수문자면 그냥 출력하라.
  		
  	참고]	아스키코드값 사용
  		'A' : 65
  		'a' : 97
  		
  		int chr = 'a' - 'A'
 */



public class Ex05 {
	public static void main(String[] args) {
		Scanner sc = new Scanner(System.in);
		System.out.println("문자를 입력하세요: ");
		int str = sc.nextInt(); 
		
		System.out.println();
		
		
	}
}

package day03;

import java.util.Scanner;
/*
 	문제 6]
 		게시물을 게시판에 붙이는데
 		하나의 게시판에는 게시물을 15개를 붙일 수 있다.
 		개시물의 갯수를 랜덤하게 입력한 후(scanner로 입력)
 		몇개의 게시판이 필요한지 계산해서 출력하는
 		프로그램을 작성하시오 
  */

public class Ex06 {
	public static void main(String[] args) {
		Scanner sc = new Scanner(System.in);
		System.out.printf("게시물 숫자를 입력하세요!: ");
		int Posts = sc.nextInt();
		int Boardnum = 1;
		
		System.out.println((Posts %15 == 0)? ("필요한 게시판 수는" +(Posts/15))+ "개 입니다." : ("필요한 게시판 수는" +((Posts/15)+Boardnum))+"개 입니다");
		
	}
}

package day03;

/*
 	Bonus]
 		3자리 숫자(100~999)를 입력받아
 		이 숫자에서 가장 가까운 배수를 만들기 위해
 		얼마가 필요한지를 계산해서 출력하는 프로그램을 만들어서
 		출력해라
 		
 		출력 예]
 		
 			241 : 200이 가까우므로 41을 빼야한다
 			365 : 400이 가까우므로 35를 더해야한다.
 */

public class Bonus01 {
	public static void main(String[] args) {
		
	}
}



