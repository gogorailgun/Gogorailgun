
break
==> 반복문과 switch-case문에서만 적용되는 명령으로
	해당명령 block을 탈출시키는(중지하는) 명려이다.
	원칙적으로 break; 명령이 사용된 블럭을 중지시킨다.
	
	for(;;) - 1
		for(;;){ -2
			if(조건식){
				break; ==> 2번 반복문을 중지시킨다. 3과는 전혀 무관하다.
			}
		}
		
		
	for(;;){ -3
	
	}
	
	참고 ]
		레이블이 붙은 break 명령
		==> 지정한 레이블의 명령을 탈출하도록 하는 명령
		
		형식 ]
		
			break 레이블;
			==> 지정한 레이블이 붙은 블럭({})을 중지하세요
			
		참고]
			레이블이란?
				==> 특정 명령의 구분을 위해서 사용자가 붙이는 명령의 별칭
				==> 가독성을 위해서 준비해 놓은 것이기도 하다.
				
				형식]
					레이블 이름: 
					
				예 ]
				
					triangle for:
					for(;;){
					}
					
					square for:
					for(;;){
					}
					
	예]
	
		one:
		for(;;){
		
			two:
			for(;;){
				break;	
				break one; // 사용 가능
			}
			
			for(;;){
				break two;  // 블럭이 다르므로 사용 x
			}
		}	
			
	규칙]
		반드시 레이블 블럭이 자신이 속한 블럭(영역)이여야 한다
		
-----------------------------------------------------------------------

continue
==> 반복문에서만 적용되며, 현재 회차의 반복을 중지하고 다음 회차의 반복을 처리하도록 하는것.
	현재 작업은 무의미 또는 필요 없으므로 더이상 진행하지 말고
	다음 회차 반복 작업을 진행하도록  하는 것.
	
	주의사항]
		다음 실행 위치는 명령에따라서 조금씩 달라진다.
		
		1]
		
		for(1 ; 2 ; 3){
			4
			continue;
			5
		}
		6
		
		실행순서 : 1 -> 2 -> 4 -> 3 -> 2 -> 4 -> 3 ->... 2가 거짓이 될 때 까지. ->6 
		
		2]
		
		while(조건식 -1){
			2
			continue;
			3
		}
		4
		
		1 -> 2 -> 1 -> 2 -> 1 -> 조건식이 거짓이 될 때 까지 반복... -> 4
		
--------------------------------------------------------------------------------------


while 반복문
	: 조건식을 제시한 후
		그 조건식이 참이면 지정한 내용을 반복하도록 하는 명령
		
		for 반복문과의 차이점은 반복획수를 제한할 카운터 변수가 형식에 포함되지 않는다.
		따라서 횟수를 정하고 싶은 경우
		명령문 이전에 변수를 만들고 반복문 내부에서 증감시켜서 처리를 해야한다.
	형식 ] 
		while(조건식){
			실행문
		}		
		
참고] for 명령이나 while 명령은 선조건처리명령이다.
		조건에 따라서 반복 명령을 한번도 실행하지 않을 수 있다.

--------------------------------------------------------------------------------------
do ~ while 반복문
	: 조건식이 참이면 반복하고
		거짓이면 반복을 종료하는 반복문
		
		후조건 처리 명령이다.
		따라서 최악의 경우라도 적어도 한번은 실행부분이 실행된다.
	
	형식]
			1
		do {	
			실행문 -2
		} while(조건식 -3);
		4
		
		실행순서 1 -> 2 -> 3 참  -> 2 -> 3...
							거짓  -> 4
		