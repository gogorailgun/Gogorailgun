#day 05

반복문
	: 조건식을 제시한 후
		조건식이 참이면 지정한 내용을 반복하도록 하는 명령
		
	종류 ]
	
		1. for 명령
		
		2. while 명령
		
		3. do while 명령
		
		4. 향상된 for 명령
		
1. for 명령
	: 특정 조건이 참이면 반복을 하도록 하는 명령
	
	while 명령하고의 차이점은 카운터 변수의 유무
	
	형식 ] 
	
	
		- 1
		for(카운터 변수 선언 & 초기화 -2 ; 조건식 -3 ; 카운터 변수 증감식 -4){
			실행내용 -5
		}
		-6
		
		실행순서 : 1 -> 2 -> 3 -> 5 -> 4 -> 3 (참인  경우) -> 5 -> 4 -> 3 ... -> 조건식이 거짓이 될 때 까지
											  (거짓인경우) -> 6
		
	예]
	
		for(int i = 0; i<10 ; i++) // int형식에 i를 0으로 지정하고 i가 10보다 작으면 i에 1을 더해주세요
			System.out.print(i +" , ");
			
			==>0, 1, 2, 3, 4, 5, 6, 7, 8, 9
			
	참고 ] 
		카운터변수 선언부는 오직 한번만 실행한다.
		따라서 주로 카운터 변수를 초기화하는 목적으로 사용한다.
		
		4번 증감식은 반복 횟수만큼 동일한 회수로 반복한다.
		따라서 주로 카운터를 증가시키는 목적으로 사용한다.
		
	참고 ]
		for 명령은 선 조건 처리 명령이다. (조건식이 거짓이면 바로 끝난다)
		따라서 최악의 경우 한번도 반복하지 않을 수 있다 (조건을 잘 짜야한다)
		반복하지 않을 수 있다는 사실을 염두해두고 조건식을 만들어야 한다.
		
	참고]
		
		for(;;){ 안의 내용이 필요하지 않다면 생략할 수 도 있다. // 조건을 안쓰는 경우는 무조건 true이기 때문에 무한반복이 일어난다.
		이때 생략된 조건식은 항상 true 로 판정된다
		
	참고] 
		카운터변수 선언부에서 만들어진 변수는
		반복문 내에서만 사용하는 지역변수가 된다.
		
		지역변수란?
			: 그 변수가 만들어진 블럭에서만 사용할 수 있는 변수
			
			변수는 Stack에 만들어진다.
			이 영역은 가장 작은 영여긍로 배정받는 영역이다.
			따라서 많은 데이터를 한번에 보관하기가 어렵다.
			
			<==
				변수를 만들어달라고 요청하는 순간 변수를 만든다.
				만들어진 변수가 영역을 벗어나면 자동 소멸된다. (이런식으로 메모리를 확보해 나간다)
				
	참고] 
		반복문도 조건문과 마찬가지로 중첩해서 사용할 수 있다.
		==> 반복문 안에 다시 반복문이 올 수 있다.
		
		**
		안쪽 반복문은 바깥 반복문이 반복되면 처음부터 다시 실행된다.
		
		for(int i = 0 ; i < 3; i++){
			for(int j = 0 ; j < 2 ; j++){
				...
			}
			...
		}
		
		
--------------------------------------------------------------------------------------------------
