#day 10

함수 (function, Method)
==> 한가지 작업을 실행하기 위해서 만들어진 가장 작은 단위의 프로그램이다.

	프로그램이란?
	이런 함수들이 모여서 원하는 목적을 이루도록 구성하는것
	
	예 ]
	
		charAt()
		:	한글자를 알아내는 작업을 실행하기 위해 만들어진 함수
		
		random()
		:	난수 하나를 발생하는 작업을 실행하기 위해 만들어진 함수
		
***
참고

	1. 함수는 누군가를 호출을 해야 실행된다.
		즉, 스스로 실행되는 함수는 없다.
		
	2. 함수는 실행이 완료되면 자신을 호출한 곳으로 실행순서를 넘겨준다.
	
	
	class Test{
		int no;
		String str ="홍길동";
		
		public static void abc(){
			System.out.println("비는 조금만... 제발...!");
		}
		
		public static void main(string[] args){
			abc();
			System.out.println("여기는 메인...")
		}
	}
	
--------------------------------------------------------------------------------------------------
함수 만드는 방법
	
	형식 ]
		
		[접근지정자] [속성]	반환값타입	함수이름(매개변수리스트){
			실행내용....
		}


		1. 함수이름
			==> 개발자가 지정하는 사용자 정의어..
			
			class $ 01{
			
			}
			
			class _01{
			
			}
			
		2. 매개변수 리스트
		==> 변수선언 형태로 만드는 것
		개수는 상관없다. 필요한만큼 만들어도 상관 없다.
		
		예 ]
		
			abc(int a, int b){
			
			}
			
			==>
			
				실행할 때
				
					abc(10, 20); -- 0
					
						==> a = 10, b = 20 의 형태로 실행이 된다.
					
					abc("10", 20); -- X
					
		목적 ]
			
			작성하는 함수가 원하는 작업을 실행하기 위해서 반드시 필요한 데이터가 있을 것이다.
			이 데이터를 기억할 준비를 하는 것이다.
			
		예]
		
			charAt(int pos) ==> 원하는 위치의 문자를 알려주는 함수
								이 함수가 원하는 작업을 충실히 수행하기 위해서는
								위치값이 반드시 필요하다.
								
			length()		==> 문자열의 길이를 알려주는 함수
								이 함수가 기능을 수행하기 위해선 데이터가 필요가 없다.
								그냥 문자의 갯수만큼 세어서 알려주면 된다.
								
		
		
		3. 반환값타입
			==> 함수는 한가지 목적을 달성하기 위한 가장 작은 단위의 프로그램이다.
				==> 함수를 실행한다는 말은 그 목적을 달성해야 한다는 것과 동일하다.
				그러면 그 달성된 목적에 따라 결과가 존재해야 할 것이다.			
			
			반환값타입이란?
				함수에게 뭔가 작업을 시켰을 때
				그 함수가 수행한 작업의 결과를 알려주는 것이다.
				==> 이 결과는 경우에 따라서 달라진다.
					결과는 매 작업에 따라 달라지므로...
					단순히 결과값의 데이터 종류만 선언하면 된다.
					
			예 ]
			
			char charAt() 	==> 이 함수의 결과는 문자로 알려줘야한다.
								따라서 반환값타입은 char(문자) 로 되어야 한다.
								
			참고 ]
			
				함수의 실행결과가 반드시 존재하는 것은 아니다.
				예를 들어
					System.out.println()
				함수가 하는 기능은 콘솔 화면에 문자열을 출력하는 기능만 가지고 있다.
				콘솔화면에 문자열을 출력하게되면 그 순간 이 함수의 목적은 모두 이루어졌다.	
				따라서 이런 경우에는 반환값타입이 아무것도 쓰지 안흔 것이 아니고
				반드시 "void" 라고 기술해야 한다.
				
				
					예 ]
						
						public static void main(String[] args){
						
						}
			참고 ]
			
				함수는 가장 작은 기능의 단위이다.
				가장 작은 한가지 목적을 달성하기 위해 만들어지는 가장 작은 단위의 프로그램이다.
				따라서 반환값은
				***
				"한개이거나, 없을 수 있다."
				반환값이 2개 이상이 되는 함수는 존재하지 않는다.
				
				예 ]
					
					int, float abc() {
					} ----------------------- X 절대로 안된다.
					
			결론 ]
			
				함수는 4가지 형태를 벗어나지 않는다.
				
				1.
					void abc(){}
					
				2. 
					int abc(){}
					
				3. 
					void abc(int a){}
				
				
				4.
					int abc(int a){}  
					
			return 의 의미
			==> 함수 내에서 사용할 수 있는 명령
			
				의미 ]
					1. 함수의 실행을 종료하세요.
					2. 함수의 결과가 있으면 알려주고 함수 실행을 종료하세요.
					
				형식 ]
				
					return; ==> 1번의 의미 
					
				형식 2]
				
					return 데이터(반환값);	==> 2번의 의미
					
				참고 ]
				
					반환값이 void인 경우는 반드시
						return;
					만 사용해야 한다.
					
					반환값이 void가 아닌 경우는 반드시
						return 데이터;
					 만 사용해야 한다.
					 
				참고 ]
					반환값이 void인 경우는
						return;
					명령을 생략할 수도 있다.
					
						void abd(){
						
							if() {
								return;
							}
						}
						
					==> 함수의 블럭( ({})) 을 마치는 순간 자동 종료가 되기 때문에...
					
					하지만 void가 아닌 경우는 반드시 
						return 데이터;
					를 사용해야 한다.
					
---------------------------------------------------------------------------------------------------

함수의 사용법

	==> 함수는 반드시 호울츨 해야만 사용할 수 있다.
		위의 내용은 함수의 기능을 정의 하는 것일 뿐이다.
		정의 내용이 스스로 실행되는 경우는 없고
		반드시 함수가 호출이 되어야 실행이 된다.
		
		따라서 함수를 사용한다는 것은 함스를 호출한다는 의미가 된다.
		
		형식 ]
		
			함수이름(데이터, ...);
			
			데이터란?
			함수는 그 함수가 실행하기 위해 필요한 데이터를 받을 준비를 하고 있다.(-->매개변수 리스트)
			따라서 그 함수에게 작업을 시키기 위해서는
			필요한 데이터를 *** 반드시 *** 입력해 줘야한다.
			==> 결론적으로 데이터(parameter)란?
				함수가 준비하고 있는 매개변수 리스트에 기억할 데이터를 제공하는것.
				
			==> 결론
				데이터는 그 함수가 준비한 매개변수의 개수와 반드시 일치해야하고(넘쳐도 안되고 모자라도 안된다)
				그 형태 역시 일치해야 한다.
				
				예 ]
				
					void abc(String s, int b){}
					
					-->
						abc("abc", 10) ------  O
						
						abc(10, "abc") ------  X : 데이터의 순서가 일치하지 않아서
						
						abc(10, 20) ---------- X : 데이터의 형태가 일치하지 않는다.
						
						abc("가나다"); 	------ X : 갯수 불일치
						
					abc("abc" , 10); 라고 호출하면
					주어진 데이터가 준비된 매개변수에 대입되어서 그 함수가 실행된다.
						s = "abc"
						b = 10 // 으로 대입되어 실행된다.
						
						
========================================================================================================

반환값 사용방법

==> 함수의 실행이 종료되면 반환값을 줄 수 있다.
	이 반환값은 함수 호출 부분에 그대로 입력이 된다.
	
	따라서 함수 호출부분에 예상되는 반호나값을 기록해 봐서
	문법적으로 이상이 없으면 그것이 반환값의 사용이 된다.
	
	예 ] 
	
		int gop(int a, int b){
			int tmp = a * b;
			return tmp;
		}
		
		==>
		
			위의 함수를 실행한 결과의 반환값에 1을 더한 연산을 해야하나면
			
			int no = gop(2, 3);
			
			int result = no+1;
			
			==> 
			int result = gop(2, 3) +1;
			
	참고 ] 
		반환값이 있는 함수라도
		필요하지 않다면 반환값을 이용하지 않아도 상관이 없다.
		
		==> 사용하지 않을거라면 굳이 변수에 담지 않아도 상관없다